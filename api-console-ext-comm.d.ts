/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 *   https://github.com/Polymer/gen-typescript-declarations
 *
 * To modify these typings, edit the source file(s):
 *   api-console-ext-comm.html
 */

/// <reference path="../polymer/types/polymer-element.d.ts" />

declare namespace ApiElements {

  /**
   * `<api-console-ext-comm>` is an element that support communication with
   * the api-console-extension.
   *
   * If the extension is installed then it will intercept the `api-request`
   * and cancel it.
   *
   * Data from the event are passed to the extension and the request is to
   * be executed from within the extension.
   */
  class ApiConsoleExtComm extends Polymer.Element {

    /**
     * If true then the API console extension has been detected.
     */
    readonly hasExtension: boolean|null|undefined;

    /**
     * An event handler for the API console events (request, abort,
     * token request etc). By default it uses body but it should be
     * the console if possible or the request panel.
     */
    eventTarget: object|null|undefined;

    /**
     * List of active requests sent to the extension.
     * The key is request ID (generated by the console) and the value
     * is the request data.
     */
    readonly _activeRequests: object|null|undefined;
    connectedCallback(): void;
    disconnectedCallback(): void;

    /**
     * Posts message on a window object to request an event from the
     * extension if it is installed.
     */
    _notifyExtension(): void;

    /**
     * Handler for event target change. Removes listener from old
     * hasndelr and sets up API console event listeners on the node.
     *
     * @param et New event target
     */
    _eventTargetChanged(et: Node|null): void;

    /**
     * Sets up API console event listeners on the target node.
     *
     * @param node Target for the events
     */
    _observerConsoleEvents(node: Node|null): void;

    /**
     * Removes API console event listeners from the target node.
     *
     * @param node Target for the events
     */
    _unobserverConsoleEvents(node: Node|null): void;

    /**
     * A handler for the message event dispatched on window object.
     * This is used in communication with an extension.
     */
    _messsageHandler(e: MessageEvent|null): void;

    /**
     * A handler for API console request event
     */
    _requestHandler(e: CustomEvent|null): void;

    /**
     * A handler for API console abort request handler.
     */
    _abortHandler(e: CustomEvent|null): void;

    /**
     * A handler for API console OAuth2 toekn request handler.
     */
    _oauthTokenHandler(e: CustomEvent|null): void;

    /**
     * Called when the api-console-extension is detected.
     */
    _extensionDetected(): void;

    /**
     * A handler for the response notified by the extension.
     */
    _responseReady(data: any): void;

    /**
     * Handler for OAuth token response.
     */
    _oauthTokenReady(data: object|null): void;
  }
}

interface HTMLElementTagNameMap {
  "api-console-ext-comm": ApiElements.ApiConsoleExtComm;
}
